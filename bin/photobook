#!/usr/bin/env ruby

require 'photobook'
require 'optparse'
require 'ostruct'

if RUBY_VERSION < "2.2"
  require 'uri'
  module URI
    remove_const(:DEFAULT_PARSER)
  end
end
require 'fastimage'

Photobook::Photo.resolution_proc = proc do |photo|
  open(photo) do |io|
    data = FastImage.new(photo)
    [ data.size[0], data.size[1], data.orientation ]
  end
end

@options = OpenStruct.new(
  :in_place => false,
  :outfile => nil,
  :layout_manager => Photobook::LayoutManager.new,
  :texfile => nil,
  :backgrounds => nil,
  :sort => nil,
  :overwrite => false,
)

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options] [photo-list]"
  opts.summary_width = 25
  opts.separator("")
  opts.separator("Options:")

  opts.on('-i', '--in-place', 'Edit the photo list in-place') do
    @options.in_place = true
  end

  opts.on('-o', '--output FILE', 'Output file') do |file|
    @options.outfile = file
  end

  opts.on('-t', '--tex-file FILE', 'LaTeX output file') do |file|
    @options.texfile = file
  end

  opts.on_tail('-h', '--help', 'Show this help') do
    puts opts
    exit
  end

  opts.on('-l', '--layouts FILE', 'File with layout specifications') do |f|
    file = Photobook::LayoutManager.find_layout_file(f)
    raise "No layout file #{f} found" unless file
    @options.layout_manager.parse(file)
  end

  opts.on('-b', '--backgrounds DIR', 'Directory of background images') do |d|
    @options.backgrounds = Dir.glob("#{d}/*").map { |p|
      Photobook::Photo.parse(p)
    }
  end

  opts.on(
      '-c', '--clear [SORT]', 'Clears layouts and optionally sorts photos'
  ) do |sort|
    @options.sort = sort || 'none'
  end

  opts.on('-f', '--force-overwrite', 'Overwrite files without asking') do
    @options.overwrite = true
  end

end

opt_parser.parse!(ARGV)

# Check for file overwrites
unless @options.overwrite
  [ @options.outfile, @options.texfile ].each do |f|
    if f && File.exist?(f)
      warn("Output file #{f} exists; replace? (y/n)")
      exit 1 unless STDIN.gets =~ /^y/i
    end
  end
end

# Check that at least one layout is present
if @options.layout_manager.layouts.empty?
  warn("No layouts specified; using default")
  @options.layout_manager.parse({
    'default' => {
      'pattern' => 'a', 'margin' => 1, 'spacing' => 1, 'grid' => '1x1'
    }
  })
end

# Set up for in-place editing (done after file overwrite testing since the
# implication of in-place editing is that you intend for overwriting)
if @options.in_place && ARGV.last
  @options.outfile = ARGV.last
end

# Read and process the list of photos
list = Photobook::PhotoList.new(@options.layout_manager, ARGF.read)
list.clear_arrangement(@options.sort) if @options.sort
list.arrange if list.needs_arranging
list.add_backgrounds(@options.backgrounds) if @options.backgrounds

# Write the list as necessary
if list.dirty?
  out_io = @options.outfile ? File.open(@options.outfile, 'w') : STDOUT
  out_io.write(list.to_s)
  out_io.close
end

# Produce TeX file
if @options.texfile
  File.open(@options.texfile, 'w') do |tex_io|
    positioner = Photobook::LaTeXPositioner.new(tex_io)
    positioner.make_document(list)
  end
end



